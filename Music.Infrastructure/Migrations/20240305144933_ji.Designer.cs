// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Music.Infrastructure.Data.Context;

#nullable disable

namespace Music.Infrastructure.Migrations
{
    [DbContext(typeof(MusicDBContext))]
    [Migration("20240305144933_ji")]
    partial class ji
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.16");

            modelBuilder.Entity("Music.Domain.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("MusicId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MusicId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Music.Domain.Entities.Music", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SingerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UrlDownload")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SingerId");

                    b.ToTable("Musices");
                });

            modelBuilder.Entity("Music.Domain.Entities.Singer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Singeres");
                });

            modelBuilder.Entity("Music.Domain.Entities.TypeMusic", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TypeMusic");
                });

            modelBuilder.Entity("MusicTypeMusic", b =>
                {
                    b.Property<string>("MusicsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeMusicsId")
                        .HasColumnType("TEXT");

                    b.HasKey("MusicsId", "TypeMusicsId");

                    b.HasIndex("TypeMusicsId");

                    b.ToTable("MusicTypeMusic");
                });

            modelBuilder.Entity("Music.Domain.Entities.Category", b =>
                {
                    b.HasOne("Music.Domain.Entities.Music", "Music")
                        .WithMany("MusicCategories")
                        .HasForeignKey("MusicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Music");
                });

            modelBuilder.Entity("Music.Domain.Entities.Music", b =>
                {
                    b.HasOne("Music.Domain.Entities.Singer", "Singer")
                        .WithMany("Musics")
                        .HasForeignKey("SingerId");

                    b.Navigation("Singer");
                });

            modelBuilder.Entity("MusicTypeMusic", b =>
                {
                    b.HasOne("Music.Domain.Entities.Music", null)
                        .WithMany()
                        .HasForeignKey("MusicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Music.Domain.Entities.TypeMusic", null)
                        .WithMany()
                        .HasForeignKey("TypeMusicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Music.Domain.Entities.Music", b =>
                {
                    b.Navigation("MusicCategories");
                });

            modelBuilder.Entity("Music.Domain.Entities.Singer", b =>
                {
                    b.Navigation("Musics");
                });
#pragma warning restore 612, 618
        }
    }
}
